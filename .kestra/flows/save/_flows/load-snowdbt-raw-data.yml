id: load-snowdbt-raw-data
namespace: snowdbt.tutorial
variables:
  database: "SNOWDBT_TUTO"
  schema: "RAW_DATA"
  stage: "ST_ADWORKS"
  fileFormat: "JSON_ADWORKS"
tasks:
  - id: refresh-directory-table
    type: io.kestra.plugin.jdbc.snowflake.Query
    sql: ALTER STAGE {{ vars.database }}.{{ vars.schema }}.{{ vars.stage }} REFRESH;
    fetch: true
  - id: select-tables
    type: io.kestra.plugin.jdbc.snowflake.Query
    sql: |
      SELECT DISTINCT REGEXP_SUBSTR(RELATIVE_PATH, '([^/]+)', 1, 1, 'i') AS TABLE_NAME
      FROM DIRECTORY(@{{ vars.database }}.{{ vars.schema }}.{{ vars.stage }})
    fetch: true
  - id: each
    type: io.kestra.core.tasks.flows.EachSequential
    value: "{{ outputs['select-tables'].rows }}"
    tasks:
      # - id: return
      #   type: io.kestra.core.tasks.debugs.Return
      #   format: "{{ taskrun.value }}"
      - id: create-table-from-infer-json
        type: io.kestra.plugin.jdbc.snowflake.Query
        sql: |
          CREATE OR REPLACE TABLE {{ vars.database }}.{{ vars.schema }}.{{ json(taskrun.value).TABLE_NAME }}
          USING TEMPLATE (
            SELECT ARRAY_AGG(OBJECT_CONSTRUCT(*))
              FROM TABLE(
                INFER_SCHEMA(
                  LOCATION=>'@{{ vars.database }}.{{ vars.schema }}.{{ vars.stage }}/{{ json(taskrun.value).TABLE_NAME }}/'
                  , FILE_FORMAT=>'{{ vars.database }}.{{ vars.schema }}.{{ vars.fileFormat }}'
                  , IGNORE_CASE => true
                  )
              )
            )
        fetch: true
      - id: load-table-from-json
        type: io.kestra.plugin.jdbc.snowflake.Query
        sql: |
          COPY INTO {{ vars.database }}.{{ vars.schema }}.{{ json(taskrun.value).TABLE_NAME }} 
          FROM '@{{ vars.database }}.{{ vars.schema }}.{{ vars.stage }}/{{ json(taskrun.value).TABLE_NAME }}/'
              FILE_FORMAT = (FORMAT_NAME= '{{ vars.database }}.{{ vars.schema }}.{{ vars.fileFormat }}') 
              MATCH_BY_COLUMN_NAME=CASE_INSENSITIVE;
        fetch: true

taskDefaults:
  - type: io.kestra.plugin.jdbc.snowflake.Query
    values:
      url: "jdbc:snowflake://ip60316.eu-west-1.snowflakecomputing.com"
      username: "{{ secret('SNOWUSER') }}"
      password: "{{ secret('SNOWPWD') }}"
      role: "SYSADMIN"
      warehouse: "SNOWDBT_XS"